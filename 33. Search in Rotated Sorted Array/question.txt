There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

solution-The array is divided into two halves using the mid index.
-At least one half of the array (either left or right) is always sorted.
-Determine if the left half is sorted (nums[left] <= nums[mid]).
-If the target lies within the sorted half, narrow down the search to that half.
-Otherwise, focus on the other half.
-Adjust left and right pointers to zero in on the target